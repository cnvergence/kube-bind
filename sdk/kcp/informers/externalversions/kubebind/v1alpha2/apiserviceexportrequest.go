/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha2

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	kubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha2"
	kubebindv1alpha2listers "github.com/kube-bind/kube-bind/sdk/kcp/listers/kubebind/v1alpha2"
	clientset "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned/cluster"
	scopedclientset "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned"
	"github.com/kube-bind/kube-bind/sdk/kcp/informers/externalversions/internalinterfaces"
)

// APIServiceExportRequestClusterInformer provides access to a shared informer and lister for
// APIServiceExportRequests.
type APIServiceExportRequestClusterInformer interface {
	Cluster(logicalcluster.Name) APIServiceExportRequestInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kubebindv1alpha2listers.APIServiceExportRequestClusterLister
}

type aPIServiceExportRequestClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAPIServiceExportRequestClusterInformer constructs a new informer for APIServiceExportRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceExportRequestClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceExportRequestClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIServiceExportRequestClusterInformer constructs a new informer for APIServiceExportRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceExportRequestClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceExportRequests().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceExportRequests().Watch(context.TODO(), options)
			},
		},
		&kubebindv1alpha2.APIServiceExportRequest{},
		resyncPeriod,
		indexers,
	)
}

func (f *aPIServiceExportRequestClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceExportRequestClusterInformer(client, resyncPeriod, cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,}, 
		f.tweakListOptions,
	)
}

func (f *aPIServiceExportRequestClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&kubebindv1alpha2.APIServiceExportRequest{}, f.defaultInformer)
}

func (f *aPIServiceExportRequestClusterInformer) Lister() kubebindv1alpha2listers.APIServiceExportRequestClusterLister {
	return kubebindv1alpha2listers.NewAPIServiceExportRequestClusterLister(f.Informer().GetIndexer())
}


// APIServiceExportRequestInformer provides access to a shared informer and lister for
// APIServiceExportRequests.
type APIServiceExportRequestInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kubebindv1alpha2listers.APIServiceExportRequestLister
}
func (f *aPIServiceExportRequestClusterInformer) Cluster(clusterName logicalcluster.Name) APIServiceExportRequestInformer {
	return &aPIServiceExportRequestInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type aPIServiceExportRequestInformer struct {
	informer cache.SharedIndexInformer
	lister kubebindv1alpha2listers.APIServiceExportRequestLister
}

func (f *aPIServiceExportRequestInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *aPIServiceExportRequestInformer) Lister() kubebindv1alpha2listers.APIServiceExportRequestLister {
	return f.lister
}

type aPIServiceExportRequestScopedInformer struct {
	factory internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace string}

func (f *aPIServiceExportRequestScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&kubebindv1alpha2.APIServiceExportRequest{}, f.defaultInformer)
}

func (f *aPIServiceExportRequestScopedInformer) Lister() kubebindv1alpha2listers.APIServiceExportRequestLister {
	return kubebindv1alpha2listers.NewAPIServiceExportRequestLister(f.Informer().GetIndexer())
}

// NewAPIServiceExportRequestInformer constructs a new informer for APIServiceExportRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceExportRequestInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string,indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAPIServiceExportRequestInformer(client, resyncPeriod,  namespace,indexers, nil)
}

// NewFilteredAPIServiceExportRequestInformer constructs a new informer for APIServiceExportRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceExportRequestInformer(client scopedclientset.Interface, resyncPeriod time.Duration,  namespace string,indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceExportRequests(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceExportRequests(namespace).Watch(context.TODO(), options)
			},
		},
		&kubebindv1alpha2.APIServiceExportRequest{},
		resyncPeriod,
		indexers,
	)
}

func (f *aPIServiceExportRequestScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAPIServiceExportRequestInformer(client, resyncPeriod, f.namespace,cache.Indexers{ 
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, f.tweakListOptions)
}

