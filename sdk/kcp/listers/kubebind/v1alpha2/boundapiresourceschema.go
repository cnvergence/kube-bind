//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha2

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha2"
)

// BoundAPIResourceSchemaClusterLister can list BoundAPIResourceSchemas across all workspaces, or scope down to a BoundAPIResourceSchemaLister for one workspace.
// All objects returned here must be treated as read-only.
type BoundAPIResourceSchemaClusterLister interface {
	// List lists all BoundAPIResourceSchemas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha2.BoundAPIResourceSchema, err error)
	// Cluster returns a lister that can list and get BoundAPIResourceSchemas in one workspace.
	Cluster(clusterName logicalcluster.Name) BoundAPIResourceSchemaLister
	BoundAPIResourceSchemaClusterListerExpansion
}

type boundAPIResourceSchemaClusterLister struct {
	indexer cache.Indexer
}

// NewBoundAPIResourceSchemaClusterLister returns a new BoundAPIResourceSchemaClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewBoundAPIResourceSchemaClusterLister(indexer cache.Indexer) *boundAPIResourceSchemaClusterLister {
	return &boundAPIResourceSchemaClusterLister{indexer: indexer}
}

// List lists all BoundAPIResourceSchemas in the indexer across all workspaces.
func (s *boundAPIResourceSchemaClusterLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.BoundAPIResourceSchema, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*kubebindv1alpha2.BoundAPIResourceSchema))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get BoundAPIResourceSchemas.
func (s *boundAPIResourceSchemaClusterLister) Cluster(clusterName logicalcluster.Name) BoundAPIResourceSchemaLister {
	return &boundAPIResourceSchemaLister{indexer: s.indexer, clusterName: clusterName}
}

// BoundAPIResourceSchemaLister can list BoundAPIResourceSchemas across all namespaces, or scope down to a BoundAPIResourceSchemaNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type BoundAPIResourceSchemaLister interface {
	// List lists all BoundAPIResourceSchemas in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha2.BoundAPIResourceSchema, err error)
	// BoundAPIResourceSchemas returns a lister that can list and get BoundAPIResourceSchemas in one workspace and namespace.
	BoundAPIResourceSchemas(namespace string) BoundAPIResourceSchemaNamespaceLister
	BoundAPIResourceSchemaListerExpansion
}

// boundAPIResourceSchemaLister can list all BoundAPIResourceSchemas inside a workspace or scope down to a BoundAPIResourceSchemaLister for one namespace.
type boundAPIResourceSchemaLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all BoundAPIResourceSchemas in the indexer for a workspace.
func (s *boundAPIResourceSchemaLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.BoundAPIResourceSchema, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha2.BoundAPIResourceSchema))
	})
	return ret, err
}

// BoundAPIResourceSchemas returns an object that can list and get BoundAPIResourceSchemas in one namespace.
func (s *boundAPIResourceSchemaLister) BoundAPIResourceSchemas(namespace string) BoundAPIResourceSchemaNamespaceLister {
	return &boundAPIResourceSchemaNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// boundAPIResourceSchemaNamespaceLister helps list and get BoundAPIResourceSchemas.
// All objects returned here must be treated as read-only.
type BoundAPIResourceSchemaNamespaceLister interface {
	// List lists all BoundAPIResourceSchemas in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha2.BoundAPIResourceSchema, err error)
	// Get retrieves the BoundAPIResourceSchema from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kubebindv1alpha2.BoundAPIResourceSchema, error)
	BoundAPIResourceSchemaNamespaceListerExpansion
}

// boundAPIResourceSchemaNamespaceLister helps list and get BoundAPIResourceSchemas.
// All objects returned here must be treated as read-only.
type boundAPIResourceSchemaNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all BoundAPIResourceSchemas in the indexer for a given workspace and namespace.
func (s *boundAPIResourceSchemaNamespaceLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.BoundAPIResourceSchema, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha2.BoundAPIResourceSchema))
	})
	return ret, err
}

// Get retrieves the BoundAPIResourceSchema from the indexer for a given workspace, namespace and name.
func (s *boundAPIResourceSchemaNamespaceLister) Get(name string) (*kubebindv1alpha2.BoundAPIResourceSchema, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kubebindv1alpha2.Resource("boundapiresourceschemas"), name)
	}
	return obj.(*kubebindv1alpha2.BoundAPIResourceSchema), nil
}

// NewBoundAPIResourceSchemaLister returns a new BoundAPIResourceSchemaLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewBoundAPIResourceSchemaLister(indexer cache.Indexer) *boundAPIResourceSchemaScopedLister {
	return &boundAPIResourceSchemaScopedLister{indexer: indexer}
}

// boundAPIResourceSchemaScopedLister can list all BoundAPIResourceSchemas inside a workspace or scope down to a BoundAPIResourceSchemaLister for one namespace.
type boundAPIResourceSchemaScopedLister struct {
	indexer cache.Indexer
}

// List lists all BoundAPIResourceSchemas in the indexer for a workspace.
func (s *boundAPIResourceSchemaScopedLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.BoundAPIResourceSchema, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha2.BoundAPIResourceSchema))
	})
	return ret, err
}

// BoundAPIResourceSchemas returns an object that can list and get BoundAPIResourceSchemas in one namespace.
func (s *boundAPIResourceSchemaScopedLister) BoundAPIResourceSchemas(namespace string) BoundAPIResourceSchemaNamespaceLister {
	return &boundAPIResourceSchemaScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// boundAPIResourceSchemaScopedNamespaceLister helps list and get BoundAPIResourceSchemas.
type boundAPIResourceSchemaScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BoundAPIResourceSchemas in the indexer for a given workspace and namespace.
func (s *boundAPIResourceSchemaScopedNamespaceLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.BoundAPIResourceSchema, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha2.BoundAPIResourceSchema))
	})
	return ret, err
}

// Get retrieves the BoundAPIResourceSchema from the indexer for a given workspace, namespace and name.
func (s *boundAPIResourceSchemaScopedNamespaceLister) Get(name string) (*kubebindv1alpha2.BoundAPIResourceSchema, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kubebindv1alpha2.Resource("boundapiresourceschemas"), name)
	}
	return obj.(*kubebindv1alpha2.BoundAPIResourceSchema), nil
}
